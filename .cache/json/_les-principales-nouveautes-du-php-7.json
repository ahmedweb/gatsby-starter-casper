{"data":{"markdownRemark":{"html":"<p>Ceci n'est pas un article approfondi sur les nouvelles fonctionnalités de PHP 7.X, j'en aborde seulement celles qui me semblent intéressant.</p>\n<h2 id=\"nouvel-opérateur-\" style=\"position:relative;\"><a href=\"#nouvel-op%C3%A9rateur-\" aria-label=\"nouvel opérateur  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nouvel opérateur &#x3C;=></h2>\n<p>La comparaison combiné (&#x3C;=>) appelé également « Spaceship operator » fonctionne à la fois sur des valeurs numériques (int et float) mais également sur des chaînes de caractères, des tableaux et sur des objets, l’intérêt sera de l'utiliser dans les algorithmes de tri en réduisant considérablement. Il permet de s’assurer en une seule opération que la variable existe et qu’elle n’est pas nulle. Exemple :</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// PHP 5.6</span>\n<span class=\"token variable\">$tab</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">usort</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$tab</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span> <span class=\"token operator\">></span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// PHP 7</span>\n<span class=\"token variable\">$tab</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">usort</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$tab</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$a</span> <span class=\"token operator\">&lt;=</span><span class=\"token operator\">></span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"visibilité-des-constantes-de-classe\" style=\"position:relative;\"><a href=\"#visibilit%C3%A9-des-constantes-de-classe\" aria-label=\"visibilité des constantes de classe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Visibilité des constantes de classe</h2>\n<p>PHP 7.1 ajoute le support de la visibilité des constantes de classe qui reflète le comportement de la visibilité de méthode et de propriété. Les constantes de classe peuvent être définies comme « public », « private » ou « protected ». Les constantes de classe déclarées sans mot-clé de visibilité explicite sont définies comme « public ».</p>\n<p>Les constantes de classes supportent désormais les visibilités : public, protected et private. Les constantes sans visibilité seront automatiquement comme publiques. Les interfaces, sont déclarer des constantes comme étant publiques.</p>\n<h2 id=\"les-types-nullable\" style=\"position:relative;\"><a href=\"#les-types-nullable\" aria-label=\"les types nullable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Les types nullable</h2>\n<p>PHP 7.0 a apporté la possibilité de typer les paramètres et les retours de fonctions. Par contre dans certains cas (par exemple une requête SQL) nos fonctions ne retourne aucun résultat. Ce type de retour peut maintenant être décrit en précédant le type d'un \"?\" pour spécifier un retour \"parfois null\".</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">/**  Permet de récupérer un enregistrement par son ID **/</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> find <span class=\"token punctuation\">(</span>int <span class=\"token variable\">$id</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span><span class=\"token keyword\">array</span>\n <span class=\"token punctuation\">{</span>\n<span class=\"token variable\">$query</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">pdo</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'SELECT * FROM id WHERE id = ?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<blockquote>\n<p>SOURCES : julp.fr - lije-creative.com - onsertotech.pro - php.net - grafikart.fr</p>\n</blockquote>","timeToRead":1,"excerpt":"Ceci n'est pas un article approfondi sur les nouvelles fonctionnalités de PHP 7.X, j'en aborde seulement celles qui me semblent intéressant…","frontmatter":{"title":"Les principales nouveautés du PHP 7","cover":"images/posts/postblog_LES_PRINCIPALES_NOUVEAUTES_DU_PHP7_0817.png","date":"2017-07-21","category":null,"tags":null,"author":null},"fields":{"slug":"/les-principales-nouveautes-du-php-7"}},"prev":{"excerpt":"Un bon développeur c'est quelqu'un de performant, de travailleur et qui est capable d'évoluer vers le e-learning…","frontmatter":{"title":"Comment devenir un bon développeur","cover":"images/posts/postblog_COMMENT_DEVENIR_UN_BON_DEVELOPLER_0817.png","date":"2017-08-01"},"fields":{"slug":"/comment-devenir-un-bon-developpeur"}},"next":{"excerpt":"Débutons par jeter un coup d'œil général sur ce qu'est Swift Mailer et ces fonctionnalités qu’il embarque avec…","frontmatter":{"title":"Swiftmailer","cover":"images/posts/postblog_Swiftmailer_1217.png","date":"2017-07-21"},"fields":{"slug":"/swiftmailer"}},"authors":{"edges":[{"node":{"uid":"casper","name":"Ahmed B.","image":"/logo.png","url":"http://devtoweb.be/","bio":" Les programmes doivent être faits pour être lus par des gens, et occasionnellement pour être exécutés par des machines. - Hal Abelson "}},{"node":{"uid":"guinevere","name":"Guinevere Kuiper","image":"https://randomuser.me/api/portraits/women/17.jpg","url":"https://randomuser.me/api/?seed=user1","bio":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam laoreet lorem nec ligula aliquet, porta blandit augue luctus. Vivamus ac quam diam. Sed vestibulum pharetra hendrerit."}}]}},"pageContext":{"slug":"/les-principales-nouveautes-du-php-7","total":12,"prev":"/comment-devenir-un-bon-developpeur","next":"/swiftmailer"}}